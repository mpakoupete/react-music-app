[{"C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\index.js":"1","C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\App.js":"2","C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\components\\Nav.js":"3","C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\components\\Player.js":"4","C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\Components\\Nav.js":"5","C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\Components\\Player.js":"6","C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\Data\\Musicdata.js":"7","C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\Components\\MusicsLibrary.js":"8","C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\Components\\Music.js":"9"},{"size":150,"mtime":1610108632715,"results":"10","hashOfConfig":"11"},{"size":2475,"mtime":1611111393596,"results":"12","hashOfConfig":"11"},{"size":342,"mtime":1610110955975,"results":"13","hashOfConfig":"11"},{"size":880,"mtime":1610111326215,"results":"14","hashOfConfig":"11"},{"size":641,"mtime":1611111393602,"results":"15","hashOfConfig":"11"},{"size":4277,"mtime":1611111393605,"results":"16","hashOfConfig":"11"},{"size":2899,"mtime":1611111393609,"results":"17","hashOfConfig":"11"},{"size":922,"mtime":1611111393599,"results":"18","hashOfConfig":"11"},{"size":1782,"mtime":1611111393598,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1q2yg4u",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\index.js",[],["43","44"],"C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\App.js",[],"C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\components\\Nav.js",[],["45","46"],"C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\components\\Player.js",["47"],"import React from 'react';\r\n\r\nconst Player = () => {\r\n    return (\r\n        <div className=\"Player\">\r\n            <div className=\"music-picture\">\r\n                <h1>music picture</h1>\r\n                <img src=\"\" alt=\"music picture\"/>\r\n            </div>\r\n            <div className=\"music-bar-controler\">\r\n                <p>Start time</p>\r\n                <input type=\"range\" name=\"\" id=\"\"/>\r\n                <p>End time</p>\r\n            </div>\r\n            <div className=\"music-controler-btn\">\r\n                <div className=\"back-btn\">\r\n                    <p>Back</p>\r\n                </div>\r\n                <div className=\"play-btn\">\r\n                    <p>Play</p>\r\n                </div>\r\n                <div className=\"forward-btn\">\r\n                    <p>Forward</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player;","C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\Components\\Nav.js",[],"C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\Components\\Player.js",["48","49","50"],"import React, {useRef, useState} from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faPause, faStepBackward, faStepForward } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Player = ({isLibraryOpen, isPlaying, setIsPlaying, audioRef, audioTime, setAudioTime, selectedMusic, setSelectedMusic, Musiclist, setMusiclist}) => {\r\n\r\nconst handleClickPlay = async () => {\r\n        if (!isPlaying) {\r\n            await audioRef.current.play();\r\n            setIsPlaying(!isPlaying);\r\n        } else {\r\n            await audioRef.current.pause();\r\n           setIsPlaying(!isPlaying);\r\n        }\r\n        console.log(audioRef);\r\n    }\r\n\r\n    const handleClickNext = async () => {\r\n        let selectedSongIndex = Musiclist.findIndex( (item) => item.active === true)\r\n        console.log(selectedSongIndex);\r\n\r\n        let tempMusicList = [...Musiclist];\r\n\r\n        for (let index = 0; index < tempMusicList.length; index++) {\r\n            tempMusicList[index].active = false;\r\n        }\r\n        tempMusicList[(selectedSongIndex + 1) % tempMusicList.length].active = true;\r\n        setMusiclist(tempMusicList);\r\n        await setSelectedMusic(Musiclist[(selectedSongIndex + 1) % tempMusicList.length]);\r\n        audioRef.current.play()\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    const handleClickPrevious = async () => {\r\n        let selectedSongIndex = Musiclist.findIndex( (item) => item.active === true)\r\n        console.log(selectedSongIndex);\r\n\r\n        let tempMusicList = [...Musiclist];\r\n\r\n        if (selectedSongIndex <= 0) selectedSongIndex =  tempMusicList.length; \r\n\r\n\r\n        for (let index = 0; index < tempMusicList.length; index++) {\r\n            tempMusicList[index].active = false;\r\n        }\r\n        let index = (selectedSongIndex - 1) % tempMusicList.length;\r\n        tempMusicList[index].active = true;\r\n        setMusiclist(tempMusicList);\r\n        await setSelectedMusic(Musiclist[index]);\r\n        audioRef.current.play()\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    const handleScrollMusic = (e) => {\r\n\r\n            if (isPlaying) {\r\n                audioRef.current.pause();\r\n                setAudioTime({...audioTime, currentTime:Number(e.target.value)});\r\n                audioRef.current.currentTime = Number(e.target.value);\r\n                audioRef.current.play();\r\n             } else {\r\n                setAudioTime({...audioTime, currentTime:Number(e.target.value)});\r\n                audioRef.current.currentTime = Number(e.target.value);\r\n            }\r\n        \r\n        console.log(Number(e.target.value));\r\n        console.log(selectedMusic);\r\n        console.log(audioRef);\r\n    }\r\n\r\n    const getTimeFormat = (time) => {\r\n        var timestamp = time;\r\n        var hours = Math.floor(timestamp / 60 / 60);\r\n        var minutes = Math.floor(timestamp / 60) - (hours * 60);\r\n        var seconds = Math.floor(timestamp % 60);\r\n        var formatted = minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');\r\n        return formatted;\r\n    }\r\n\r\n    return ( \r\n        <div className={`Player  ${isLibraryOpen? \"move-player\" : \"\"}`}>\r\n            <img className={`${isPlaying? \"rotate-picture\" : \"\"}`} src={selectedMusic.cover} alt=\"music picture\"/>\r\n            <div className=\"music-bar-controler\">\r\n                <p>{getTimeFormat(audioTime.currentTime) || 0}</p>\r\n                <input  max={audioTime.duration || 0} onChange={handleScrollMusic} value={audioTime.currentTime} className=\"input\" type=\"range\" name=\"\" id=\"\"/>\r\n                <p>{audioTime.currentTime ? getTimeFormat(audioTime.duration) : \"00:00\"}</p>\r\n            </div>\r\n            <div className=\"music-controler-btn\">\r\n                <div className=\"back-btn\">\r\n                <FontAwesomeIcon onClick={handleClickPrevious} icon={faStepBackward} size=\"2x\"/> \r\n                </div>\r\n                <div className=\"play-btn\">\r\n                <FontAwesomeIcon onClick={handleClickPlay} icon={isPlaying? faPause : faPlay} size=\"2x\"/>\r\n                </div>\r\n                <div className=\"forward-btn\">\r\n                <FontAwesomeIcon onClick={handleClickNext} icon={faStepForward} size=\"2x\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player;","C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\Data\\Musicdata.js",[],"C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\Components\\MusicsLibrary.js",[],"C:\\Users\\mpakoupete\\Documents\\Mawaki - Doc\\MERN STACK\\MY REALISATION\\app-1-wave-music\\src\\Components\\Music.js",["51"],"import React from 'react';\r\n\r\n/* A single Music Component that we will store in the Library Container\r\n    Each Music is represent by the Cover, the title, Artiste Name and the Audio to Play */\r\n\r\nconst Music = ( {isPlaying, setIsPlaying, audioRef, selectedMusic, setSelectedMusic, music, Musiclist, setMusiclist}) => {\r\n\r\n    /* When User selects a music in the library, this song is played automaticaly */\r\n    const handleSelectSong = async () => {\r\n\r\n        audioRef.current.pause()\r\n        setIsPlaying(!isPlaying);\r\n        \r\n        let selectedSongIndex = Musiclist.findIndex( (item) => item === music); // Find Index of What we selected on the Web Browser\r\n        let tempMusicList = [...Musiclist];\r\n\r\n        for (let index = 0; index < tempMusicList.length; index++) {\r\n            tempMusicList[index].active = false;                       // active is a Property Song to set the one that is active. We put all to false before setting true to the one tha has been selected\r\n        } \r\n\r\n        tempMusicList[selectedSongIndex].active = true;\r\n        \r\n        await setSelectedMusic(music);\r\n        setMusiclist(tempMusicList);\r\n\r\n        audioRef.current.play();  // We Play the Song\r\n        setIsPlaying(true);\r\n \r\n        console.log(audioRef);\r\n    }\r\n    \r\n\r\n    return (\r\n        // here we Want to style differently the Music that has been selected with the className \"selected-song\"\r\n        <div className={`music ${music.active? \"selected-song\" : \"\"} `} onClick={handleSelectSong} >\r\n            <img className=\"music-image\" src={music.cover} alt=\"music cover picture\"/>\r\n        <div className=\"music-description\">\r\n            <h3>{music.name}</h3>\r\n            <h4>{music.artist}</h4>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Music;",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"52","replacedBy":"56"},{"ruleId":"54","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":8,"column":17,"nodeType":"60","endLine":8,"endColumn":50},{"ruleId":"61","severity":1,"message":"62","line":1,"column":16,"nodeType":"63","messageId":"64","endLine":1,"endColumn":22},{"ruleId":"61","severity":1,"message":"65","line":1,"column":24,"nodeType":"63","messageId":"64","endLine":1,"endColumn":32},{"ruleId":"58","severity":1,"message":"59","line":82,"column":13,"nodeType":"60","endLine":82,"endColumn":115},{"ruleId":"58","severity":1,"message":"59","line":36,"column":13,"nodeType":"60","endLine":36,"endColumn":87},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],["66"],["67"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]